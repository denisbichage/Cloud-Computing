---

- name: Check if previous installation exists
  stat:
    path: "{{ full_path_repositories_dir }}"
  register: prev_inst_dir

- name: Delete a previous installation directory
  file:
    path: "{{ full_path_repositories_dir }}"
    state: absent
  when: prev_inst_dir.stat.isdir is defined and prev_inst_dir.stat.isdir

- name: Create install directories (if they do not exist) and change ownership
  file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
    owner: "{{ user }}"
    group: "{{ user }}"
  loop:
    - "{{ full_path_repositories_dir }}"

- name: Copy github ssh keys from local host to remote (~/.ssh/id_rsa)
  copy:
    src: /Users/guillaume.bournique/.ssh/{{ item }}
    dest: "{{ user_path }}/.ssh/{{ item }}"
    mode: 0400
  loop:
    - "id_rsa.pub"
    - "id_rsa"

- name: Clone the code django repository
  git:
    repo: "{{ git_repository }}"
    dest: "{{ full_path_django_repo_dir }}"
    accept_hostkey: yes
    key_file: "{{ user_path }}/.ssh/id_rsa"
    update: no

- name: Checkout to branch {{ git_branch_name }}
  command: git checkout {{ git_branch_name }}
  ignore_errors: yes
  args:
    chdir: "{{ full_path_django_repo_dir }}"

- name: Remove github ssh keys from remote host
  file:
    path: "{{ user_path }}/.ssh/{{ item }}"
    state: absent
  loop:
    - "id_rsa.pub"
    - "id_rsa"

- name: Compose up postgres and redis databases
  docker_compose:
    project_src: "{{ full_path_django_repo_dir }}"
    pull: yes
    state: present
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Get docker image tag from poetry project version
  become_user: "{{ user }}"
  command: poetry version -s
  args:
    chdir: "{{ full_path_django_repo_dir }}"
  register: image_tag

- name: Run dockerised django application
  community.docker.docker_container:
    name: webapp
    state: started
    detach: yes
    ports: ["8080:8080"]
    restart: no
    networks: [name: global-network]
    env:
      DEBUG: "True"
      POSTGRES_HOST: "postgres"
      POSTGRES_PASSWORD: "postgres"
      REDIS_ENDPOINT: "redis:6379"
      SNS_TOPIC_ARN: ""
      SES_IDENTITY_ARN: ""
    image: "{{ docker_image_name }}:{{ image_tag.stdout }}"
  vars:
    ansible_python_interpreter: /usr/bin/python3
