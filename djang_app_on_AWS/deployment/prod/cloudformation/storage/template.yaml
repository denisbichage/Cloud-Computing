AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: |
  This CloudFormation template defines the S3 buckets and a Lambda Custom Resource to manage them.
  - S3BucketForFailoverWebsite:  S3 website to be used as a failover endpoint when the main app is unavailable
  - S3BucketCodeDeployArtifacts: Stores CodeDeploy artifacts, such as application code and deployment scripts
  - S3BucketWebappStaticFiles: Stores and serve the web application resources and static files through CF
  - S3LoggingBucketDomainName: Stores CloudFront, ALB, VPC access logs
  - CloudFront Origin Access Identity User for CF to serve private static resources from S3BucketWebappStaticFiles
  - Lambda custom resource to manage the creation of files at S3 Bucket creation and emptying buckets before delete
  - Bucket Policies and Lambda Role

Parameters:
  ASGScheduledActionUpTimeHour:
    Default: '17'
    Type: String
    Description: Scale up time, for eg. '8' will cause the ASG to scale up at 8AM GMT.
    AllowedValues: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12',
                    '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24']
  ASGScheduledActionDownTimeHour:
    Default: '23'
    Type: String
    Description: Scale down time, for eg. '23' will cause the ASG to scale down at 11PM GMT.
    AllowedValues: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12',
                    '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24']
  R53HostedZoneName:
    Description: The DNS name of an existing Amazon Route 53 hosted zone. For eg, mydomain.com
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    Type: String
    ConstraintDescription: Must be an existing DNS zone name.
  R53SubDomain:
    Description: The subdomain of the dns entry (optional). For example, app -> app.mydomain.com.
    Type: String
    Default: ''

Conditions:
  IsEmptySubDomain: !Equals [!Ref R53SubDomain, '']

Resources:
  # S3 Buckets
  S3BucketForFailoverWebsite:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      # S3 website bucket name must match the DNS Name served by the CF distribution custom origin
      BucketName: !If [IsEmptySubDomain, !Ref R53HostedZoneName, !Join ['', [!Ref R53SubDomain, ., !Ref R53HostedZoneName]]]
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  S3BucketCodeDeployArtifacts:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Join ['-', [!If [IsEmptySubDomain, !Ref R53HostedZoneName, !Join ['', [!Ref R53SubDomain, ., !Ref R53HostedZoneName]]], codedeploy-artifacts]]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
  S3BucketWebappStaticFiles:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Join ['-', [!If [IsEmptySubDomain, !Ref R53HostedZoneName, !Join ['', [!Ref R53SubDomain, ., !Ref R53HostedZoneName]]], static-files]]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  S3BucketLogging:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Join ['-', [!If [IsEmptySubDomain, !Ref R53HostedZoneName, !Join ['', [!Ref R53SubDomain, ., !Ref R53HostedZoneName]]], logging-bucket]]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # S3 Bucket Policies
  BucketPolicyForLoggingBucket:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketLogging
      PolicyDocument:
        Statement:
        - Sid: AllowCFandALBToPutLogs
          Action: [s3:PutObject]
          Effect: Allow
          Resource: !Join ['', [!GetAtt S3BucketLogging.Arn, '/*']]
          # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
          Principal:
            AWS: [arn:aws:iam::652711504416:root]
        - Sid: AllowDeliveryLogsPutObjects
          Action: [s3:PutObject]
          Effect: Allow
          Resource: !Join ['', [!GetAtt S3BucketLogging.Arn, '/*']]
          Principal:
            Service: [delivery.logs.amazonaws.com]
        - Sid: AllowDeliveryLogsGetBucketAcl
          Action: [s3:GetBucketAcl]
          Effect: Allow
          Resource: !Join ['', [!GetAtt S3BucketLogging.Arn]]
          Principal:
            Service: [delivery.logs.amazonaws.com]
  BucketPolicyForFailoverWebsite:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketForFailoverWebsite
      PolicyDocument:
        Statement:
        - Sid: AllowPublicGetObject
          Action: [s3:Get*, s3:List*]
          Effect: Allow
          Resource: !Join ['', [!GetAtt S3BucketForFailoverWebsite.Arn, '/*']]
          Principal: "*"
  BucketPolicyForWebappStaticFiles:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketWebappStaticFiles
      PolicyDocument:
        Statement:
        - Sid: AllowEC2toUploadS3Files
          Action: [s3:Get*, s3:List*, s3:Put*]
          Effect: Allow
          Resource: !Join ['', [!GetAtt S3BucketWebappStaticFiles.Arn, '/*']]
          Principal:
            Service: [ec2.amazonaws.com]
        - Sid: GetObjectOnlyFromCloudFrontOAIUser
          Action: [s3:Get*]
          Effect: Allow
          Resource: !Join ['', [!GetAtt S3BucketWebappStaticFiles.Arn, '/*']]
          Principal:
            CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub Static assets in ${AWS::StackName}

  # Lambda Custom Resource
  S3CustomResource:
    Type: Custom::S3CustomResource
    Properties:
      ServiceToken: !GetAtt LambdaCustomResourceForS3.Arn
      codedeploy_bucket_name: !Ref S3BucketCodeDeployArtifacts
      website_bucket_name: !Ref S3BucketForFailoverWebsite
      static_assets_bucket_name: !Ref S3BucketWebappStaticFiles
      logging_bucket_name: !Ref S3BucketLogging
      index_html_content: !Sub |
        <!doctype html>
        <html lang="en">
        <head>
          <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
          <meta name="viewport" content="width=device-width, initial-scale=1"/>
          <meta name="description" content="Failover page for ${R53HostedZoneName}">
          <title>Failover page</title>
          <link href="https://s3.${AWS::Region}.amazonaws.com/${S3BucketWebappStaticFiles}/staticfiles/css/materialize.css" type="text/css" rel="stylesheet" media="screen,projection"/>
          <link href="https://s3.${AWS::Region}.amazonaws.com/${S3BucketWebappStaticFiles}/staticfiles/css/style.css" type="text/css" rel="stylesheet" media="screen,projection"/>
          <link rel="shortcut icon" href="https://s3.${AWS::Region}.amazonaws.com/${S3BucketWebappStaticFiles}/staticfiles/favicon.ico">
          <link rel="apple-touch-icon" href="https://s3.${AWS::Region}.amazonaws.com/${S3BucketWebappStaticFiles}/staticfiles/apple-touch-icon.png">
          <style>
            img {
              width: 100%;
              height: 100%;
              max-width: 25vw;
              max-height: 15vw;
            }
          </style>
        </head>
        <body>
          <header>
            <div class="navbar-fixed">
              <nav style="background-color:white">
                  <a id="logo-container" href="/" class="brand-logo center">
                    <img src="https://s3.${AWS::Region}.amazonaws.com/${S3BucketWebappStaticFiles}/staticfiles/Logo.png" alt="logo">
                  </a>
                  <a href="#" data-target="nav-mobile" class="sidenav-trigger"><i class="material-icons">menu</i></a>
              </nav>
            </div>
          </header>
          <main>
            <div class="container">
              <div class="row">
                <center>
                  <br><br><br><br><br>
                  <h5>Oops.. ${R53HostedZoneName} is currently unavailable. Please try again between ${ASGScheduledActionUpTimeHour}.00-${ASGScheduledActionDownTimeHour}.00 (GMT).</h5>
                  <br>
                  <a href="/" id="refresh-button" class="btn-large waves-effect waves-light gray darken-1">Try again</a>
                </center>
              </div>
            </div>
            <br><br><br><br><br><br><br><br>
          </main>
          <footer>
            <footer id="my-footer" class="page-footer grey" style="position:sticky;bottom:0;left:0;width:100%;">
              <div class="container">
                Source code on <a class="grey-text text-darken-3" href="https://github.com/gbourniq/django-on-aws" target="_blank">Github</a>
                <br><br>
              </div>
            </footer>
          </footer>
        </body>
        </html>
      error_html_content: |
        <h1>Uh oh, there was an error with the S3 website</h1>
  LambdaCustomResourceForS3:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to manage S3 buckets lifecycle
      # Function name must remain unchanged across stack updates, otherwise the
      # following error occurs "ServiceToken not allowed to change on CustomResources
      FunctionName: !Join ['', [!Ref R53SubDomain, -, StorageStack, -, lambda-s3]]
      Handler: index.handler
      Role: !GetAtt LambdaRoleCustomResourceForS3.Arn
      Timeout: 30
      MemorySize: 128
      Runtime: python3.6
      Code:
        # Using ZipFile is required to import the cfnresponse module
        ZipFile: |
          import boto3
          import cfnresponse
          import uuid

          def handler(event, context):
              """
              This Lambda function has two purposes:
              - Provision S3 buckets with resources on Stack Creation and Update
              - Empty S3 buckets on Stack Deletion, including versioned buckets
              """
              event_type = event['RequestType']
              print(f"{event_type} event received")
              response_data = {}
              # https://stackoverflow.com/questions/50599602/updating-custom-resources-causes-them-to-be-deleted
              resource_id = ""
              if "PhysicalResourceId" not in event:
                  event['PhysicalResourceId'] = str(uuid.uuid1())
              resource_id = event['PhysicalResourceId']
              s3_client = boto3.client('s3')
              s3_resource = boto3.resource('s3')
              # Retrieve parameters from the CloudFormation Custom Resource
              codedeploy_bucket_name = event['ResourceProperties']['codedeploy_bucket_name']
              website_bucket_name = event['ResourceProperties']['website_bucket_name']
              static_assets_bucket_name = event['ResourceProperties']['static_assets_bucket_name']
              logging_bucket_name = event['ResourceProperties']['logging_bucket_name']
              try:
                  if event_type in ('Create', 'Update'):
                      s3_client.put_object(
                          Bucket=website_bucket_name,
                          Key="failover/index.html",
                          Body=event['ResourceProperties']['index_html_content'].encode("utf-8"),
                          ContentType="text/html"
                      )
                      s3_client.put_object(
                          Bucket=website_bucket_name,
                          Key="error.html",
                          Body=event['ResourceProperties']['error_html_content'].encode("utf-8"),
                          ContentType="text/html"
                      )
                  elif event_type == 'Delete':
                      # Delete objects
                      s3_resource.Bucket(website_bucket_name).objects.all().delete()
                      s3_resource.Bucket(static_assets_bucket_name).objects.all().delete()
                      s3_resource.Bucket(logging_bucket_name).objects.all().delete()
                      s3_resource.Bucket(codedeploy_bucket_name).objects.all().delete()
                      # Delete object versions and deletemarkers for versioned buckets
                      object_versions = s3_client.list_object_versions(
                          Bucket=codedeploy_bucket_name
                      )
                      if 'Versions' in object_versions:
                          for obj in object_versions['Versions']:
                              print(f"[VERSIONED BUCKET] Deleting object version {obj}")
                              s3_client.delete_object(
                                  Bucket=codedeploy_bucket_name,
                                  Key=obj['Key'],
                                  VersionId=obj['VersionId']
                              )
                      if 'DeleteMarkers' in object_versions:
                          for obj in object_versions['DeleteMarkers']:
                              print(f"[VERSIONED BUCKET] Deleting object delete marker {obj}")
                              s3_client.delete_object(
                                  Bucket=codedeploy_bucket_name,
                                  Key=obj['Key'],
                                  VersionId=obj['VersionId']
                              )
                  print(f"{event_type} operation successful! Sending the signal back to cfn.")
                  cfnresponse.send(
                      event, context, cfnresponse.SUCCESS, response_data, resource_id
                  )

              except Exception as excpt:
                  print(f"Execution failed... {excpt}")
                  response_data['Data'] = f"Execution failed... {excpt}"
                  cfnresponse.send(
                      event, context, cfnresponse.FAILED, response_data, resource_id
                  )

  # IAM
  LambdaRoleCustomResourceForS3:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref AWS::StackName, LambdaRoleCustomS3]]
      AssumeRolePolicyDocument:
        # Allow Lambda service to assume the role
        Version: '2012-10-17'
        Statement:
        - Action: [sts:AssumeRole]
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
      Policies:
        # Policy for Lambda to push logs to CloudWatch
        - PolicyName: !Join ['-', [!Ref AWS::StackName, AWSLambdaCWPolicy]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Effect: Allow
              Resource: arn:aws:logs:*:*:*
        # Policy for Lambda to manage S3 bucket resources and S3 objects
        - PolicyName: !Join ['-', [!Ref AWS::StackName, AWSLambdaS3Policy]]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Action: [s3:PutObject, s3:DeleteObject*, s3:List*]
              Effect: Allow
              Resource:
                - !Join ['', [!GetAtt S3BucketForFailoverWebsite.Arn, '*']]
                - !Join ['', [!GetAtt S3BucketCodeDeployArtifacts.Arn, '*']]
                - !Join ['', [!GetAtt S3BucketWebappStaticFiles.Arn, '*']]

Outputs:
  OAIUserId:
    Value: !Ref OriginAccessIdentity
  S3WebsiteBucketDomainName:
    Value: !GetAtt S3BucketForFailoverWebsite.DomainName
  S3BucketNameWebappStaticFiles:
    Value: !Ref S3BucketWebappStaticFiles
  S3BucketDomainNameWebappStaticFiles:
    Value: !GetAtt S3BucketWebappStaticFiles.DomainName
  S3BucketArnStaticFiles:
    Value: !GetAtt S3BucketWebappStaticFiles.Arn
  S3BucketNameCodeDeployArtifacts:
    Value: !Ref S3BucketCodeDeployArtifacts
  S3BucketArnCodeDeployArtifacts:
    Value: !GetAtt S3BucketCodeDeployArtifacts.Arn
  S3BucketDomainNameLogging:
    Value: !GetAtt S3BucketLogging.DomainName
  S3BucketNameLogging:
    Value: !Ref S3BucketLogging
