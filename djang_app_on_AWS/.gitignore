# VS Code ignores
.DS_Store

.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.code-workspace

# Ignore builds
*bin/
*nested-stacks.yaml

# Local History for Visual Studio Code
.history/
# default ignore
__pycache__/
.pytest_cache/
.idea/
.vscode/
node_modules/
*/frontend/build/
.coverage*
htmlcov/
*.code-workspace
*.ipynb
*.swp
*.egg-info
.DS_Store

# python packaging
dist/

# Django static files
*staticfiles/
*mediafiles/

# Generated documentation

# Logs
*.log

### Terraform + Ansible

# Ansible staging inventory which is automatically create/destroyed by Terraform
*hosts

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
*crash.log

# Any log files
*.log

# Exclude all .tfvars files, which are likely to contain sentitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
#
*.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
